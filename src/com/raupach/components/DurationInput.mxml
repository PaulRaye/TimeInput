<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Metadata>
		[Event (name="change", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flash.utils.getDefinitionByName;
			
			import spark.events.TextOperationEvent;
			
			private var _duration:Object = {hours:0, minutes:0};
			
			private var stashedHour:String;
			private var stashedMinute:String;
			
			
			private function sendEvents():void {
				dispatchEvent(new Event("DurationUpdated"));
				dispatchEvent(new Event("change"));
			}
			
			[Bindable (event="DurationUpdated")]
			public function get duration():Number {
				var mins:Number = (_duration.hours * 60) + _duration.minutes
				return(mins);
			}
			
			public function set duration(value:Number):void {
				_duration = {hours:0, minutes:0};
				_duration.hours = int(value / 60);
				_duration.minutes = value % 60;
				dispatchEvent(new Event("DurationUpdated"));
			}
			
			[Bindable (event="DurationUpdated")]
			public function get hour():String {
				return _duration.hours.toString();
			}
			
			public function set hour(value:String):void {
				var h:Number = Number(value);
				var stash:Number = _duration.hours;
				
				if (isNaN(h)) {
					h = _duration.hours;
				} else {
					_duration.hours = h;
				} 
				 
				if (stash == _duration.hours) {
					dispatchEvent(new Event("DurationUpdated"));
				} else {
					sendEvents();
				}
				
			}
			[Bindable (event="DurationUpdated")]
			public function get minute():String {
				if (_duration.minutes < 10) {
					return "0" + _duration.minutes.toString();
				} else {
					return _duration.minutes.toString();
				}
			}
			
			public function set minute(value:String):void {
				var m:Number = Number(value);
				var stash:Number = _duration.minutes;
				
				if ((isNaN(m)) || m > 59) {
					m = _duration.minutes;
				} else {
					_duration.minutes = m;
				}
				
				if (stash != _duration.minutes) {
					sendEvents();
				}
			}
			
			
			protected function hourInput_changeHandler(event:TextOperationEvent):void {
				if (Number(hourInput.text) > 99) {
					hourInput.text = stashedHour;
				}
			}
			
			
			protected function hourInput_changingHandler(event:TextOperationEvent):void {
				stashedHour = event.target.text;
			}
			
			
			protected function minuteInput_changeHandler(event:TextOperationEvent):void {
				
				if (Number(minuteInput.text) > 59) {
					minuteInput.text = stashedMinute;
				}
			}
			
			
			protected function minuteInput_changingHandler(event:TextOperationEvent):void {
				stashedMinute = minuteInput.text;
			}
			
		]]>
	</fx:Script>
	<s:Group x="0" y="0">
		<s:Rect height="20" width="45" x="0.5" y="0.5">
			<s:stroke>
				<s:SolidColorStroke caps="none" color="#000000" joints="miter" miterLimit="4" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
		<s:TextInput id="hourInput" skinClass="com.raupach.components.HourInput" text="{hour}" 
					 x="5" y="5" restrict="0-9" maxChars="2" 
					 focusOut="{hour=hourInput.text}" 
					 changing="hourInput_changingHandler(event)" 
					 change="hourInput_changeHandler(event)"/>
		<s:RichText color="#000000" fontFamily="Arial" fontSize="12" height="15" tabStops="S0" text=":" width="10" x="21" y="6"/>
		<s:TextInput id="minuteInput" skinClass="com.raupach.components.MinuteInput" text="{minute}" 
					 x="25" y="5"  restrict="0-9" maxChars="2"
					 focusOut="{minute=minuteInput.text}" 
					 change="minuteInput_changeHandler(event)"
					 changing="minuteInput_changingHandler(event)"
					 />
	</s:Group>
</s:Group>
